# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
# flake8: noqa
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import glc_sensor_measurements.gRPC_command_center.sensor_pb2 as sensor__pb2


class GlucoseSensorStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.pump_it_up = channel.unary_unary(
                '/GlucoseSensor/pump_it_up',
                request_serializer=sensor__pb2.VolumeRequest.SerializeToString,
                response_deserializer=sensor__pb2.VolumeResponse.FromString,
                )
        self.monitor = channel.unary_stream(
                '/GlucoseSensor/monitor',
                request_serializer=sensor__pb2.MonitoringRequest.SerializeToString,
                response_deserializer=sensor__pb2.Measurement.FromString,
                )
        self.record = channel.unary_stream(
                '/GlucoseSensor/record',
                request_serializer=sensor__pb2.RecordingRequest.SerializeToString,
                response_deserializer=sensor__pb2.Measurement.FromString,
                )


class GlucoseSensorServicer(object):
    """Missing associated documentation comment in .proto file."""

    def pump_it_up(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def monitor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def record(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GlucoseSensorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'pump_it_up': grpc.unary_unary_rpc_method_handler(
                    servicer.pump_it_up,
                    request_deserializer=sensor__pb2.VolumeRequest.FromString,
                    response_serializer=sensor__pb2.VolumeResponse.SerializeToString,
            ),
            'monitor': grpc.unary_stream_rpc_method_handler(
                    servicer.monitor,
                    request_deserializer=sensor__pb2.MonitoringRequest.FromString,
                    response_serializer=sensor__pb2.Measurement.SerializeToString,
            ),
            'record': grpc.unary_stream_rpc_method_handler(
                    servicer.record,
                    request_deserializer=sensor__pb2.RecordingRequest.FromString,
                    response_serializer=sensor__pb2.Measurement.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'GlucoseSensor', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class GlucoseSensor(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def pump_it_up(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GlucoseSensor/pump_it_up',
            sensor__pb2.VolumeRequest.SerializeToString,
            sensor__pb2.VolumeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def monitor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/GlucoseSensor/monitor',
            sensor__pb2.MonitoringRequest.SerializeToString,
            sensor__pb2.Measurement.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def record(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/GlucoseSensor/record',
            sensor__pb2.RecordingRequest.SerializeToString,
            sensor__pb2.Measurement.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
